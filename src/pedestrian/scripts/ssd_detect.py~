#!/usr/bin/env python
# coding: utf-8

# rospy for the subscriber
import rospy
# ROS Image message
from sensor_msgs.msg import Image
# ROS Image message -> OpenCV2 image converter
from cv_bridge import CvBridge, CvBridgeError
# OpenCV2 for saving an image
import cv2
#import tensorflow as tfl

# Instantiate CvBridge
bridge = CvBridge()


# # Detection with SSD
# 
# In this example, we will load a SSD model and use it to detect objects.

# ### 1. Setup
# 
# * First, Load necessary libs and set up caffe and caffe_root

# In[23]:
import time
import numpy as np
import matplotlib.pyplot as plt
import cv2
#get_ipython().magic(u'matplotlib inline')

plt.rcParams['figure.figsize'] = (10, 10)
plt.rcParams['image.interpolation'] = 'nearest'
plt.rcParams['image.cmap'] = 'gray'

# Make sure that caffe is on the python path:
caffe_root = '/home/jackqian/caffe/'  # this file is expected to be in {caffe_root}/examples
import os
os.chdir(caffe_root)
import sys
sys.path.insert(0, 'python')

import caffe
caffe.set_device(0)
caffe.set_mode_gpu()


# * Load LabelMap.

# In[24]:

from google.protobuf import text_format
from caffe.proto import caffe_pb2

#load PASCAL VOC labels
labelmap_file = '/home/jackqian/caffe/data/VOC0712/labelmap_voc.prototxt'
#labelmap_file = '/home/jackqian/caffe/data/kitti/labelmap_kitti.prototxt'
file = open(labelmap_file, 'r')
labelmap = caffe_pb2.LabelMap()
text_format.Merge(str(file.read()), labelmap)

def get_labelname(labelmap, labels):
    num_labels = len(labelmap.item)
    labelnames = []
    if type(labels) is not list:
        labels = [labels]
    for label in labels:
        found = False
        for i in xrange(0, num_labels):
            if label == labelmap.item[i].label:
                found = True
                labelnames.append(labelmap.item[i].display_name)
                break
        assert found == True
    return labelnames


# * Load the net in the test phase for inference, and configure input preprocessing.

# In[25]:

model_def = '/home/jackqian/caffe/models/VGGNet/VOC0712/SSD_300x300/deploy.prototxt'
model_weights = '/home/jackqian/caffe/models/VGGNet/VOC0712/SSD_300x300/VGG_VOC0712_SSD_300x300_iter_120000.caffemodel'

# model_def = '/home/jackqian/caffe/models/VGGNet/kitti/deploy.prototxt'
# model_weights = '/home/jackqian/caffe/models/VGGNet/kitti/VGG_KITTI_lite_Expand_SSD_1241x376_iter_120000.caffemodel'

net = caffe.Net(model_def,      # defines the structure of the model
                model_weights,  # contains the trained weights
                caffe.TEST)     # use test mode (e.g., don't perform dropout)

# input preprocessing: 'data' is the name of the input blob == net.inputs[0]
transformer = caffe.io.Transformer({'data': net.blobs['data'].data.shape})
transformer.set_transpose('data', (2, 0, 1))
transformer.set_mean('data', np.array([104,117,123])) # mean pixel
transformer.set_raw_scale('data', 255)  # the reference model operates on images in [0,255] range instead of [0,1]
transformer.set_channel_swap('data', (2,1,0))  # the reference model has channels in BGR order instead of RGB


# ### 2. SSD detection

# * Load an image.

# In[26]:

def image_callback(msg):
    print("Received an image!")
    try:
        # Convert your ROS Image message to OpenCV2
        cv2_img = bridge.imgmsg_to_cv2(msg, "bgr8")
    except CvBridgeError, e:
        print(e)
    else:
        # Save your OpenCV2 image as a jpeg

        # time1 = time.time()
        # cv2.waitKey(500)
        # time2 = time.time()
        # print time2-time1

        #cv2.imshow('camera_image1.jpeg', cv2_img)
        cv2_img = cv2.resize(cv2_img,(684,548))
        #cv2_img = cv2.resize(cv2_img, (342, 274))
        cv2.imwrite("test.jpg",cv2_img)
        image_process()

        #cv2.waitKey(1)
	cv2.waitKey(1)


def image_process():
    time1 = time.time()
    caffe.set_device(0)
    caffe.set_mode_gpu()


    # set net to batch size of 1

    image_resize = 300
    net.blobs['data'].reshape(1, 3, image_resize, image_resize)

    image = caffe.io.load_image("test.jpg")



    result = cv2.imread("test.jpg")


    print image.shape
    # * Run the net and examine the top_k results

    # In[27]:


    transformed_image = transformer.preprocess('data', image)
    net.blobs['data'].data[...] = transformed_image



    # Forward pass.
    time2 = time.time()


    detections = net.forward()['detection_out']
    time3 = time.time()
    print time3 - time2

    #
    #
    # Parse the outputs.
    det_label = detections[0,0,:,1]
    det_conf = detections[0,0,:,2]
    det_xmin = detections[0,0,:,3]
    det_ymin = detections[0,0,:,4]
    det_xmax = detections[0,0,:,5]
    det_ymax = detections[0,0,:,6]

    # Get detections with confidence higher than 0.6.
    top_indices = [i for i, conf in enumerate(det_conf) if conf >= 0.2]

    top_conf = det_conf[top_indices]
    top_label_indices = det_label[top_indices].tolist()
    top_labels = get_labelname(labelmap, top_label_indices)
    top_xmin = det_xmin[top_indices]
    top_ymin = det_ymin[top_indices]
    top_xmax = det_xmax[top_indices]
    top_ymax = det_ymax[top_indices]


    # * Plot the boxes

    # In[28]:

    for i in xrange(top_conf.shape[0]):
        xmin = int(round(top_xmin[i] * image.shape[1]))
        ymin = int(round(top_ymin[i] * image.shape[0]))
        xmax = int(round(top_xmax[i] * image.shape[1]))
        ymax = int(round(top_ymax[i] * image.shape[0]))
        score = top_conf[i]
        label = int(top_label_indices[i])
        label_name = top_labels[i]
        if label_name == "car":
            display_txt = '%s: %.2f'%(label_name, score)

            cv2.rectangle(result, (xmin, ymin), (xmax, ymax), (0, 255, 0), 2)
            font = cv2.FONT_HERSHEY_SIMPLEX
            cv2.putText(result, display_txt, (xmin, ymin - 4), font, 1, (0, 255, 0), 2)

    cv2.imshow('camera_image.jpeg', result)

    cv2.waitKey(1)
    time4 = time.time()

    print "total",time4 - time1


def main():
    rospy.init_node('image_listener')
    # Define your image topic
    image_topic = "/axis/image_rect_color"
    # Set up your subscriber and define its callback
    rospy.Subscriber(image_topic, Image, image_callback)
    #rospy.Timer(rospy.Duration(0.1), my_callback)
    # Spin until ctrl + c
    rospy.spin()


# if __name__ == '__main__':
#     while(1):
#         image_process()

if __name__ == '__main__':
    main()
